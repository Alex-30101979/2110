import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = os.getenv("TOKEN")

questions = [
    "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –∑–∞–ª–∏–ø–∞–µ—à—å –≤ —ç–∫—Ä–∞–Ω –±–µ–∑ —Ç–æ–ª–∫—É?",
    "–ú–æ–∂–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞–ª(–∞) —É—Ç—Ä–æ–º?",
    "–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Ç—ã –¥–µ—Ä–∂–∏—à—å –≤ –≥–æ–ª–æ–≤–µ —Å–µ–π—á–∞—Å?",
    "–ß–∏—Ç–∞–µ—à—å –ª–∏ —Ç—ã –æ–¥–∏–Ω –∞–±–∑–∞—Ü –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫—É —Ä–∞–∑?",
    "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å, –∫–æ–≥–¥–∞ —Å–∞–¥–∏—à—å—Å—è –∑–∞ —Ä–∞–±–æ—Ç—É?",
    "–ö–æ–≥–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞) —Å–µ–±—è —É–º–Ω—ã–º?"
]

answers = [
    ["–ü–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "–ò–Ω–æ–≥–¥–∞", "–†–µ–¥–∫–æ"],
    ["–ù–µ—Ç", "–î–∞, —Å —Ç—Ä—É–¥–æ–º", "–î–∞, –ª–µ–≥–∫–æ"],
    ["5+", "3‚Äì4", "1‚Äì2"],
    ["–î–∞, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ", "–ò–Ω–æ–≥–¥–∞", "–ü–æ—á—Ç–∏ –Ω–∏–∫–æ–≥–¥–∞"],
    ["–ü–∞–Ω–∏–∫–∞/—Å—Ç—É–ø–æ—Ä", "–í—è–ª–æ—Å—Ç—å", "–Ø—Å–Ω–æ—Å—Ç—å"],
    ["–î–∞–∂–µ –Ω–µ –ø–æ–º–Ω—é", "–ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥", "–í—á–µ—Ä–∞"]
]

results = {
    "overheat": "üî• –ö–∏–ø—è—â–∏–π –º–æ–∑–≥... (–∑–¥–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å PDF-—Ç–µ–∫—Å—Ç)",
    "defocus": "‚òÅÔ∏è –†–∞—Å—Ñ–æ–∫—É—Å... (–∑–¥–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å PDF-—Ç–µ–∫—Å—Ç)",
    "slow": "üê¢ –¢–æ—Ä–º–æ–∑... (–∑–¥–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å PDF-—Ç–µ–∫—Å—Ç)",
    "sabotage": "üé≠ –°–∞–º–æ—Å–∞–±–æ—Ç–∞–∂–Ω–∏–∫... (–∑–¥–µ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å PDF-—Ç–µ–∫—Å—Ç)"
}

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {"q": 0, "score": []}
    await send_question(update, context)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    q_index = user_data[user_id]["q"]

    if q_index >= len(questions):
        await show_result(update, context)
        return

    question = questions[q_index]
    options = answers[q_index]

    keyboard = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in options]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.message.edit_text(question, reply_markup=reply_markup)
    else:
        await update.message.reply_text(question, reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    answer = query.data
    user_data[user_id]["score"].append(answer)
    user_data[user_id]["q"] += 1
    await send_question(update, context)

async def show_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answers = user_data[user_id]["score"]

    if answers.count("–ü–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å") > 1:
        result_text = results["overheat"]
    elif answers.count("–ù–µ—Ç") > 1:
        result_text = results["defocus"]
    elif answers.count("–í—è–ª–æ—Å—Ç—å") > 1:
        result_text = results["slow"]
    else:
        result_text = results["sabotage"]

    await update.callback_query.message.edit_text(result_text)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
